"use strict";/* eslint-disable valid-jsdoc */ /* eslint-disable max-len */ /* eslint-disable require-jsdoc */function cov_1ukkxo9spu(){var path="/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-3.ts";var hash="7751791f2762906a5245df9ad55f2153dc8d13e4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-3.ts",statementMap:{"0":{start:{line:5,column:0},end:{line:5,column:62}},"1":{start:{line:6,column:0},end:{line:6,column:25}},"2":{start:{line:18,column:8},end:{line:18,column:33}},"3":{start:{line:19,column:8},end:{line:19,column:31}},"4":{start:{line:20,column:8},end:{line:20,column:23}},"5":{start:{line:23,column:8},end:{line:23,column:29}},"6":{start:{line:26,column:8},end:{line:26,column:28}},"7":{start:{line:29,column:8},end:{line:29,column:24}},"8":{start:{line:38,column:16},end:{line:38,column:17}},"9":{start:{line:39,column:8},end:{line:42,column:9}},"10":{start:{line:40,column:12},end:{line:40,column:33}},"11":{start:{line:41,column:12},end:{line:41,column:16}},"12":{start:{line:43,column:8},end:{line:43,column:19}},"13":{start:{line:52,column:29},end:{line:52,column:30}},"14":{start:{line:53,column:8},end:{line:58,column:9}},"15":{start:{line:53,column:21},end:{line:53,column:22}},"16":{start:{line:54,column:12},end:{line:57,column:13}},"17":{start:{line:55,column:16},end:{line:55,column:35}},"18":{start:{line:56,column:16},end:{line:56,column:22}},"19":{start:{line:59,column:8},end:{line:59,column:30}},"20":{start:{line:67,column:21},end:{line:67,column:34}},"21":{start:{line:68,column:25},end:{line:68,column:42}},"22":{start:{line:69,column:29},end:{line:69,column:30}},"23":{start:{line:70,column:37},end:{line:70,column:39}},"24":{start:{line:71,column:16},end:{line:71,column:17}},"25":{start:{line:72,column:16},end:{line:72,column:17}},"26":{start:{line:73,column:36},end:{line:73,column:37}},"27":{start:{line:74,column:32},end:{line:74,column:33}},"28":{start:{line:75,column:25},end:{line:75,column:27}},"29":{start:{line:76,column:8},end:{line:76,column:38}},"30":{start:{line:77,column:8},end:{line:77,column:46}},"31":{start:{line:78,column:8},end:{line:80,column:9}},"32":{start:{line:79,column:12},end:{line:79,column:56}},"33":{start:{line:81,column:8},end:{line:98,column:9}},"34":{start:{line:82,column:12},end:{line:82,column:94}},"35":{start:{line:83,column:12},end:{line:83,column:86}},"36":{start:{line:85,column:12},end:{line:95,column:13}},"37":{start:{line:86,column:16},end:{line:86,column:107}},"38":{start:{line:89,column:16},end:{line:94,column:17}},"39":{start:{line:90,column:20},end:{line:90,column:111}},"40":{start:{line:93,column:20},end:{line:93,column:139}},"41":{start:{line:96,column:12},end:{line:96,column:54}},"42":{start:{line:97,column:12},end:{line:97,column:16}},"43":{start:{line:99,column:8},end:{line:99,column:14}},"44":{start:{line:100,column:8},end:{line:109,column:9}},"45":{start:{line:101,column:12},end:{line:101,column:18}},"46":{start:{line:102,column:12},end:{line:107,column:13}},"47":{start:{line:103,column:16},end:{line:105,column:17}},"48":{start:{line:104,column:20},end:{line:104,column:56}},"49":{start:{line:106,column:16},end:{line:106,column:20}},"50":{start:{line:108,column:12},end:{line:108,column:16}},"51":{start:{line:110,column:8},end:{line:110,column:26}},"52":{start:{line:113,column:0},end:{line:113,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:40},end:{line:21,column:5}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:18},end:{line:24,column:5}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:17},end:{line:27,column:5}},line:25},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:13},end:{line:30,column:5}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:28},end:{line:44,column:5}},line:37},"5":{name:"(anonymous_5)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:40},end:{line:60,column:5}},line:51},"6":{name:"(anonymous_6)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:47},end:{line:111,column:5}},line:66}},branchMap:{"0":{loc:{start:{line:54,column:12},end:{line:57,column:13}},type:"if",locations:[{start:{line:54,column:12},end:{line:57,column:13}},{start:{line:54,column:12},end:{line:57,column:13}}],line:54},"1":{loc:{start:{line:78,column:8},end:{line:80,column:9}},type:"if",locations:[{start:{line:78,column:8},end:{line:80,column:9}},{start:{line:78,column:8},end:{line:80,column:9}}],line:78},"2":{loc:{start:{line:85,column:12},end:{line:95,column:13}},type:"if",locations:[{start:{line:85,column:12},end:{line:95,column:13}},{start:{line:85,column:12},end:{line:95,column:13}}],line:85},"3":{loc:{start:{line:89,column:16},end:{line:94,column:17}},type:"if",locations:[{start:{line:89,column:16},end:{line:94,column:17}},{start:{line:89,column:16},end:{line:94,column:17}}],line:89},"4":{loc:{start:{line:103,column:16},end:{line:105,column:17}},type:"if",locations:[{start:{line:103,column:16},end:{line:105,column:17}},{start:{line:103,column:16},end:{line:105,column:17}}],line:103}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-3.ts",sources:["/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-3.ts"],names:[],mappings:"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",sourcesContent:["/* eslint-disable valid-jsdoc */\n/* eslint-disable max-len */\n/* eslint-disable require-jsdoc */\n\n/**\n * Class where you can decypher a string\n */\nexport class Cifrado {\n  /**\n   * Constructor of the class\n   * @param alphabet Alphabet the user passes\n   * @param message Message to cypher or Decypher\n   * @param key Key of the cypher and decypher\n   */\n  constructor(private alphabet : string, private message : string,\n    private key : string) {}\n\n  getAlphabet() {\n    return this.alphabet;\n  }\n\n  getMessage() {\n    return this.message;\n  }\n\n  getKey() {\n    return this.key;\n  }\n\n  /**\n   * This method resizes the key in case the message lenght is higher\n   * @param message Message to cypher or Decypher\n   * @param key Key of the cypher and decypher\n   * @return The new Key with the new lenght\n   */\n  resizekey(message : string, key : string) {\n    let i = 0;\n    while (key.length < message.length) {\n      key += key.charAt(i);\n      i++;\n    }\n    return key;\n  }\n\n  /**\n   * This method gets the position on the alphabet of any string\n   * @param alphabet The full alphabet introduced by the user\n   * @param string Any string\n   * @return The letter position of any letter on the string\n   */\n  getLetterPosition(alphabet : string, string : string) {\n    let letterPosition = 0;\n    for (let i = 0; i < alphabet.length; i++) {\n      if (string === alphabet[i]) {\n        letterPosition = i;\n        break;\n      }\n    }\n\n    return letterPosition;\n  }\n\n  /**\n   * This method cypher or decypher a string\n   * @param selectOption This lets the user to select if he wants to cypher or decypher a string\n   * @returns The cypher or decypher string\n   */\n  umbreakableCypherandDecypher(selectOption : boolean) {\n    let newKey : string = this.getKey();\n    let newMessage : string = this.getMessage();\n    let cypherFunction = 0;\n    const cypherLetterPosition = [];\n    let i = 0;\n    let j = 0;\n    let messageLetterPosition = 0;\n    let keyLetterPosition = 0;\n    let resultText = '';\n\n    newKey = newKey.toLowerCase();\n    newMessage = newMessage.toLowerCase();\n\n    if (newKey.length < newMessage.length) {\n      newKey = this.resizekey(newMessage, newKey);\n    }\n\n    while ( i < newMessage.length) {\n      messageLetterPosition = this.getLetterPosition(this.getAlphabet(), newMessage[i]);\n      keyLetterPosition = this.getLetterPosition(this.getAlphabet(), newKey[i]);\n      // Cifrar una cadena\n      if (selectOption === true) {\n        cypherFunction = (messageLetterPosition + keyLetterPosition) % (this.getAlphabet().length);\n      } else {\n        if ((messageLetterPosition - keyLetterPosition) % (this.getAlphabet().length) >= 0) {\n          cypherFunction = (messageLetterPosition - keyLetterPosition) % (this.getAlphabet().length);\n        } else {\n          cypherFunction = (messageLetterPosition - keyLetterPosition + this.getAlphabet().length) % (this.getAlphabet().length);\n        }\n      }\n      cypherLetterPosition.push(cypherFunction);\n      i++;\n    }\n\n    i = 0;\n    while (i < newKey.length) {\n      j = 0;\n      while (j < this.getAlphabet().length) {\n        if (j === cypherLetterPosition[i]) {\n          resultText += this.getAlphabet()[j];\n        }\n        j++;\n      }\n      i++;\n    }\n\n    return resultText;\n  }\n}\n\n/* const scanf = require('scanf');\nlet alphabet = '';\nlet message = '';\nlet key = '';\nlet selection = 0;\nlet selectOption = true;\n\nconsole.log('Introduzca un alfabeto');\nalphabet = scanf('%s');\n\nconsole.log('Introduzca un mensaje para cifrar o descifrar');\nmessage = scanf('%s');\n\nconsole.log('Introduzca una clave');\nkey = scanf('%s');\n\nconst prueba = new Cifrado(alphabet, message, key);\n\nconsole.log('\xBFQuiere cifrar o descifrar? (0-Cifrar, 1-Descifrar)');\nselection = scanf('%d');\n\nif (selection === 0) {\n  selectOption = true;\n  console.log(prueba.umbreakableCypherandDecypher(selectOption));\n} else if (selection === 1) {\n  selectOption = false;\n  console.log(prueba.umbreakableCypherandDecypher(selectOption));\n} else {\n  console.log('Opci\xF3n no soportada');\n} */\n\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7751791f2762906a5245df9ad55f2153dc8d13e4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ukkxo9spu=function(){return actualCoverage;};}return actualCoverage;}cov_1ukkxo9spu();cov_1ukkxo9spu().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1ukkxo9spu().s[1]++;exports.Cifrado=void 0;/**
 * Class where you can decypher a string
 */class Cifrado{/**
     * Constructor of the class
     * @param alphabet Alphabet the user passes
     * @param message Message to cypher or Decypher
     * @param key Key of the cypher and decypher
     */constructor(alphabet,message,key){cov_1ukkxo9spu().f[0]++;cov_1ukkxo9spu().s[2]++;this.alphabet=alphabet;cov_1ukkxo9spu().s[3]++;this.message=message;cov_1ukkxo9spu().s[4]++;this.key=key;}getAlphabet(){cov_1ukkxo9spu().f[1]++;cov_1ukkxo9spu().s[5]++;return this.alphabet;}getMessage(){cov_1ukkxo9spu().f[2]++;cov_1ukkxo9spu().s[6]++;return this.message;}getKey(){cov_1ukkxo9spu().f[3]++;cov_1ukkxo9spu().s[7]++;return this.key;}/**
     * This method resizes the key in case the message lenght is higher
     * @param message Message to cypher or Decypher
     * @param key Key of the cypher and decypher
     * @return The new Key with the new lenght
     */resizekey(message,key){cov_1ukkxo9spu().f[4]++;let i=(cov_1ukkxo9spu().s[8]++,0);cov_1ukkxo9spu().s[9]++;while(key.length<message.length){cov_1ukkxo9spu().s[10]++;key+=key.charAt(i);cov_1ukkxo9spu().s[11]++;i++;}cov_1ukkxo9spu().s[12]++;return key;}/**
     * This method gets the position on the alphabet of any string
     * @param alphabet The full alphabet introduced by the user
     * @param string Any string
     * @return The letter position of any letter on the string
     */getLetterPosition(alphabet,string){cov_1ukkxo9spu().f[5]++;let letterPosition=(cov_1ukkxo9spu().s[13]++,0);cov_1ukkxo9spu().s[14]++;for(let i=(cov_1ukkxo9spu().s[15]++,0);i<alphabet.length;i++){cov_1ukkxo9spu().s[16]++;if(string===alphabet[i]){cov_1ukkxo9spu().b[0][0]++;cov_1ukkxo9spu().s[17]++;letterPosition=i;cov_1ukkxo9spu().s[18]++;break;}else{cov_1ukkxo9spu().b[0][1]++;}}cov_1ukkxo9spu().s[19]++;return letterPosition;}/**
     * This method cypher or decypher a string
     * @param selectOption This lets the user to select if he wants to cypher or decypher a string
     * @returns The cypher or decypher string
     */umbreakableCypherandDecypher(selectOption){cov_1ukkxo9spu().f[6]++;let newKey=(cov_1ukkxo9spu().s[20]++,this.getKey());let newMessage=(cov_1ukkxo9spu().s[21]++,this.getMessage());let cypherFunction=(cov_1ukkxo9spu().s[22]++,0);const cypherLetterPosition=(cov_1ukkxo9spu().s[23]++,[]);let i=(cov_1ukkxo9spu().s[24]++,0);let j=(cov_1ukkxo9spu().s[25]++,0);let messageLetterPosition=(cov_1ukkxo9spu().s[26]++,0);let keyLetterPosition=(cov_1ukkxo9spu().s[27]++,0);let resultText=(cov_1ukkxo9spu().s[28]++,'');cov_1ukkxo9spu().s[29]++;newKey=newKey.toLowerCase();cov_1ukkxo9spu().s[30]++;newMessage=newMessage.toLowerCase();cov_1ukkxo9spu().s[31]++;if(newKey.length<newMessage.length){cov_1ukkxo9spu().b[1][0]++;cov_1ukkxo9spu().s[32]++;newKey=this.resizekey(newMessage,newKey);}else{cov_1ukkxo9spu().b[1][1]++;}cov_1ukkxo9spu().s[33]++;while(i<newMessage.length){cov_1ukkxo9spu().s[34]++;messageLetterPosition=this.getLetterPosition(this.getAlphabet(),newMessage[i]);cov_1ukkxo9spu().s[35]++;keyLetterPosition=this.getLetterPosition(this.getAlphabet(),newKey[i]);// Cifrar una cadena
cov_1ukkxo9spu().s[36]++;if(selectOption===true){cov_1ukkxo9spu().b[2][0]++;cov_1ukkxo9spu().s[37]++;cypherFunction=(messageLetterPosition+keyLetterPosition)%this.getAlphabet().length;}else{cov_1ukkxo9spu().b[2][1]++;cov_1ukkxo9spu().s[38]++;if((messageLetterPosition-keyLetterPosition)%this.getAlphabet().length>=0){cov_1ukkxo9spu().b[3][0]++;cov_1ukkxo9spu().s[39]++;cypherFunction=(messageLetterPosition-keyLetterPosition)%this.getAlphabet().length;}else{cov_1ukkxo9spu().b[3][1]++;cov_1ukkxo9spu().s[40]++;cypherFunction=(messageLetterPosition-keyLetterPosition+this.getAlphabet().length)%this.getAlphabet().length;}}cov_1ukkxo9spu().s[41]++;cypherLetterPosition.push(cypherFunction);cov_1ukkxo9spu().s[42]++;i++;}cov_1ukkxo9spu().s[43]++;i=0;cov_1ukkxo9spu().s[44]++;while(i<newKey.length){cov_1ukkxo9spu().s[45]++;j=0;cov_1ukkxo9spu().s[46]++;while(j<this.getAlphabet().length){cov_1ukkxo9spu().s[47]++;if(j===cypherLetterPosition[i]){cov_1ukkxo9spu().b[4][0]++;cov_1ukkxo9spu().s[48]++;resultText+=this.getAlphabet()[j];}else{cov_1ukkxo9spu().b[4][1]++;}cov_1ukkxo9spu().s[49]++;j++;}cov_1ukkxo9spu().s[50]++;i++;}cov_1ukkxo9spu().s[51]++;return resultText;}}cov_1ukkxo9spu().s[52]++;exports.Cifrado=Cifrado;/* const scanf = require('scanf');
let alphabet = '';
let message = '';
let key = '';
let selection = 0;
let selectOption = true;

console.log('Introduzca un alfabeto');
alphabet = scanf('%s');

console.log('Introduzca un mensaje para cifrar o descifrar');
message = scanf('%s');

console.log('Introduzca una clave');
key = scanf('%s');

const prueba = new Cifrado(alphabet, message, key);

console.log('¿Quiere cifrar o descifrar? (0-Cifrar, 1-Descifrar)');
selection = scanf('%d');

if (selection === 0) {
  selectOption = true;
  console.log(prueba.umbreakableCypherandDecypher(selectOption));
} else if (selection === 1) {
  selectOption = false;
  console.log(prueba.umbreakableCypherandDecypher(selectOption));
} else {
  console.log('Opción no soportada');
} */ //# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUwsR0FBbUJLLE1BQW5GLENBQ0QsQ0FGRCxJQUVPLHFEQUNMLEdBQUksQ0FBQ1kscUJBQXFCLENBQUdDLGlCQUF6QixFQUErQyxLQUFLbEIsV0FBTCxHQUFtQkssTUFBbEUsRUFBNkUsQ0FBakYsQ0FBb0YscURBQ2xGUyxjQUFjLENBQUcsQ0FBQ0cscUJBQXFCLENBQUdDLGlCQUF6QixFQUErQyxLQUFLbEIsV0FBTCxHQUFtQkssTUFBbkYsQ0FDRCxDQUZELElBRU8scURBQ0xTLGNBQWMsQ0FBRyxDQUFDRyxxQkFBcUIsQ0FBR0MsaUJBQXhCLENBQTRDLEtBQUtsQixXQUFMLEdBQW1CSyxNQUFoRSxFQUEyRSxLQUFLTCxXQUFMLEdBQW1CSyxNQUEvRyxDQUNELENBQ0YsQ0FaNEIseUJBYTdCVSxvQkFBb0IsQ0FBQ00sSUFBckIsQ0FBMEJQLGNBQTFCLEVBYjZCLHlCQWM3QlYsQ0FBQyxHQUNGLENBakNnRCx5QkFtQ2pEQSxDQUFDLENBQUcsQ0FBSixDQW5DaUQseUJBb0NqRCxNQUFPQSxDQUFDLENBQUdRLE1BQU0sQ0FBQ1AsTUFBbEIsQ0FBMEIsMEJBQ3hCVyxDQUFDLENBQUcsQ0FBSixDQUR3Qix5QkFFeEIsTUFBT0EsQ0FBQyxDQUFHLEtBQUtoQixXQUFMLEdBQW1CSyxNQUE5QixDQUFzQywwQkFDcEMsR0FBSVcsQ0FBQyxHQUFLRCxvQkFBb0IsQ0FBQ1gsQ0FBRCxDQUE5QixDQUFtQyxxREFDakNlLFVBQVUsRUFBSSxLQUFLbkIsV0FBTCxHQUFtQmdCLENBQW5CLENBQWQsQ0FDRCxDQUZELGlDQURvQyx5QkFJcENBLENBQUMsR0FDRixDQVB1Qix5QkFReEJaLENBQUMsR0FDRixDQTdDZ0QseUJBK0NqRCxNQUFPZSxXQUFQLENBQ0QsQ0E1R2lCLEMseUJBQXBCRyx3QkErR0EiLCJuYW1lcyI6WyJDaWZyYWRvIiwiY29uc3RydWN0b3IiLCJhbHBoYWJldCIsIm1lc3NhZ2UiLCJrZXkiLCJnZXRBbHBoYWJldCIsImdldE1lc3NhZ2UiLCJnZXRLZXkiLCJyZXNpemVrZXkiLCJpIiwibGVuZ3RoIiwiY2hhckF0IiwiZ2V0TGV0dGVyUG9zaXRpb24iLCJzdHJpbmciLCJsZXR0ZXJQb3NpdGlvbiIsInVtYnJlYWthYmxlQ3lwaGVyYW5kRGVjeXBoZXIiLCJzZWxlY3RPcHRpb24iLCJuZXdLZXkiLCJuZXdNZXNzYWdlIiwiY3lwaGVyRnVuY3Rpb24iLCJjeXBoZXJMZXR0ZXJQb3NpdGlvbiIsImoiLCJtZXNzYWdlTGV0dGVyUG9zaXRpb24iLCJrZXlMZXR0ZXJQb3NpdGlvbiIsInJlc3VsdFRleHQiLCJ0b0xvd2VyQ2FzZSIsInB1c2giLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL2hvbWUvdXN1YXJpby91bGwtZXNpdC1pbmYtZHNpLTIxLTIyLXByY3QwNi1nZW5lcmljcy1zb2xpZC1QYWJsbzQwMC9jb2RlLXByMDYvc3JjL2VqZXJjaWNpby0zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jICovXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWpzZG9jICovXG5cbi8qKlxuICogQ2xhc3Mgd2hlcmUgeW91IGNhbiBkZWN5cGhlciBhIHN0cmluZ1xuICovXG5leHBvcnQgY2xhc3MgQ2lmcmFkbyB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgY2xhc3NcbiAgICogQHBhcmFtIGFscGhhYmV0IEFscGhhYmV0IHRoZSB1c2VyIHBhc3Nlc1xuICAgKiBAcGFyYW0gbWVzc2FnZSBNZXNzYWdlIHRvIGN5cGhlciBvciBEZWN5cGhlclxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgY3lwaGVyIGFuZCBkZWN5cGhlclxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhbHBoYWJldCA6IHN0cmluZywgcHJpdmF0ZSBtZXNzYWdlIDogc3RyaW5nLFxuICAgIHByaXZhdGUga2V5IDogc3RyaW5nKSB7fVxuXG4gIGdldEFscGhhYmV0KCkge1xuICAgIHJldHVybiB0aGlzLmFscGhhYmV0O1xuICB9XG5cbiAgZ2V0TWVzc2FnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICB9XG5cbiAgZ2V0S2V5KCkge1xuICAgIHJldHVybiB0aGlzLmtleTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZXNpemVzIHRoZSBrZXkgaW4gY2FzZSB0aGUgbWVzc2FnZSBsZW5naHQgaXMgaGlnaGVyXG4gICAqIEBwYXJhbSBtZXNzYWdlIE1lc3NhZ2UgdG8gY3lwaGVyIG9yIERlY3lwaGVyXG4gICAqIEBwYXJhbSBrZXkgS2V5IG9mIHRoZSBjeXBoZXIgYW5kIGRlY3lwaGVyXG4gICAqIEByZXR1cm4gVGhlIG5ldyBLZXkgd2l0aCB0aGUgbmV3IGxlbmdodFxuICAgKi9cbiAgcmVzaXpla2V5KG1lc3NhZ2UgOiBzdHJpbmcsIGtleSA6IHN0cmluZykge1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoa2V5Lmxlbmd0aCA8IG1lc3NhZ2UubGVuZ3RoKSB7XG4gICAgICBrZXkgKz0ga2V5LmNoYXJBdChpKTtcbiAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBnZXRzIHRoZSBwb3NpdGlvbiBvbiB0aGUgYWxwaGFiZXQgb2YgYW55IHN0cmluZ1xuICAgKiBAcGFyYW0gYWxwaGFiZXQgVGhlIGZ1bGwgYWxwaGFiZXQgaW50cm9kdWNlZCBieSB0aGUgdXNlclxuICAgKiBAcGFyYW0gc3RyaW5nIEFueSBzdHJpbmdcbiAgICogQHJldHVybiBUaGUgbGV0dGVyIHBvc2l0aW9uIG9mIGFueSBsZXR0ZXIgb24gdGhlIHN0cmluZ1xuICAgKi9cbiAgZ2V0TGV0dGVyUG9zaXRpb24oYWxwaGFiZXQgOiBzdHJpbmcsIHN0cmluZyA6IHN0cmluZykge1xuICAgIGxldCBsZXR0ZXJQb3NpdGlvbiA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbHBoYWJldC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHN0cmluZyA9PT0gYWxwaGFiZXRbaV0pIHtcbiAgICAgICAgbGV0dGVyUG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV0dGVyUG9zaXRpb247XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgY3lwaGVyIG9yIGRlY3lwaGVyIGEgc3RyaW5nXG4gICAqIEBwYXJhbSBzZWxlY3RPcHRpb24gVGhpcyBsZXRzIHRoZSB1c2VyIHRvIHNlbGVjdCBpZiBoZSB3YW50cyB0byBjeXBoZXIgb3IgZGVjeXBoZXIgYSBzdHJpbmdcbiAgICogQHJldHVybnMgVGhlIGN5cGhlciBvciBkZWN5cGhlciBzdHJpbmdcbiAgICovXG4gIHVtYnJlYWthYmxlQ3lwaGVyYW5kRGVjeXBoZXIoc2VsZWN0T3B0aW9uIDogYm9vbGVhbikge1xuICAgIGxldCBuZXdLZXkgOiBzdHJpbmcgPSB0aGlzLmdldEtleSgpO1xuICAgIGxldCBuZXdNZXNzYWdlIDogc3RyaW5nID0gdGhpcy5nZXRNZXNzYWdlKCk7XG4gICAgbGV0IGN5cGhlckZ1bmN0aW9uID0gMDtcbiAgICBjb25zdCBjeXBoZXJMZXR0ZXJQb3NpdGlvbiA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgaiA9IDA7XG4gICAgbGV0IG1lc3NhZ2VMZXR0ZXJQb3NpdGlvbiA9IDA7XG4gICAgbGV0IGtleUxldHRlclBvc2l0aW9uID0gMDtcbiAgICBsZXQgcmVzdWx0VGV4dCA9ICcnO1xuXG4gICAgbmV3S2V5ID0gbmV3S2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgbmV3TWVzc2FnZSA9IG5ld01lc3NhZ2UudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChuZXdLZXkubGVuZ3RoIDwgbmV3TWVzc2FnZS5sZW5ndGgpIHtcbiAgICAgIG5ld0tleSA9IHRoaXMucmVzaXpla2V5KG5ld01lc3NhZ2UsIG5ld0tleSk7XG4gICAgfVxuXG4gICAgd2hpbGUgKCBpIDwgbmV3TWVzc2FnZS5sZW5ndGgpIHtcbiAgICAgIG1lc3NhZ2VMZXR0ZXJQb3NpdGlvbiA9IHRoaXMuZ2V0TGV0dGVyUG9zaXRpb24odGhpcy5nZXRBbHBoYWJldCgpLCBuZXdNZXNzYWdlW2ldKTtcbiAgICAgIGtleUxldHRlclBvc2l0aW9uID0gdGhpcy5nZXRMZXR0ZXJQb3NpdGlvbih0aGlzLmdldEFscGhhYmV0KCksIG5ld0tleVtpXSk7XG4gICAgICAvLyBDaWZyYXIgdW5hIGNhZGVuYVxuICAgICAgaWYgKHNlbGVjdE9wdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICBjeXBoZXJGdW5jdGlvbiA9IChtZXNzYWdlTGV0dGVyUG9zaXRpb24gKyBrZXlMZXR0ZXJQb3NpdGlvbikgJSAodGhpcy5nZXRBbHBoYWJldCgpLmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoKG1lc3NhZ2VMZXR0ZXJQb3NpdGlvbiAtIGtleUxldHRlclBvc2l0aW9uKSAlICh0aGlzLmdldEFscGhhYmV0KCkubGVuZ3RoKSA+PSAwKSB7XG4gICAgICAgICAgY3lwaGVyRnVuY3Rpb24gPSAobWVzc2FnZUxldHRlclBvc2l0aW9uIC0ga2V5TGV0dGVyUG9zaXRpb24pICUgKHRoaXMuZ2V0QWxwaGFiZXQoKS5sZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN5cGhlckZ1bmN0aW9uID0gKG1lc3NhZ2VMZXR0ZXJQb3NpdGlvbiAtIGtleUxldHRlclBvc2l0aW9uICsgdGhpcy5nZXRBbHBoYWJldCgpLmxlbmd0aCkgJSAodGhpcy5nZXRBbHBoYWJldCgpLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN5cGhlckxldHRlclBvc2l0aW9uLnB1c2goY3lwaGVyRnVuY3Rpb24pO1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgbmV3S2V5Lmxlbmd0aCkge1xuICAgICAgaiA9IDA7XG4gICAgICB3aGlsZSAoaiA8IHRoaXMuZ2V0QWxwaGFiZXQoKS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGogPT09IGN5cGhlckxldHRlclBvc2l0aW9uW2ldKSB7XG4gICAgICAgICAgcmVzdWx0VGV4dCArPSB0aGlzLmdldEFscGhhYmV0KClbal07XG4gICAgICAgIH1cbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRUZXh0O1xuICB9XG59XG5cbi8qIGNvbnN0IHNjYW5mID0gcmVxdWlyZSgnc2NhbmYnKTtcbmxldCBhbHBoYWJldCA9ICcnO1xubGV0IG1lc3NhZ2UgPSAnJztcbmxldCBrZXkgPSAnJztcbmxldCBzZWxlY3Rpb24gPSAwO1xubGV0IHNlbGVjdE9wdGlvbiA9IHRydWU7XG5cbmNvbnNvbGUubG9nKCdJbnRyb2R1emNhIHVuIGFsZmFiZXRvJyk7XG5hbHBoYWJldCA9IHNjYW5mKCclcycpO1xuXG5jb25zb2xlLmxvZygnSW50cm9kdXpjYSB1biBtZW5zYWplIHBhcmEgY2lmcmFyIG8gZGVzY2lmcmFyJyk7XG5tZXNzYWdlID0gc2NhbmYoJyVzJyk7XG5cbmNvbnNvbGUubG9nKCdJbnRyb2R1emNhIHVuYSBjbGF2ZScpO1xua2V5ID0gc2NhbmYoJyVzJyk7XG5cbmNvbnN0IHBydWViYSA9IG5ldyBDaWZyYWRvKGFscGhhYmV0LCBtZXNzYWdlLCBrZXkpO1xuXG5jb25zb2xlLmxvZygnwr9RdWllcmUgY2lmcmFyIG8gZGVzY2lmcmFyPyAoMC1DaWZyYXIsIDEtRGVzY2lmcmFyKScpO1xuc2VsZWN0aW9uID0gc2NhbmYoJyVkJyk7XG5cbmlmIChzZWxlY3Rpb24gPT09IDApIHtcbiAgc2VsZWN0T3B0aW9uID0gdHJ1ZTtcbiAgY29uc29sZS5sb2cocHJ1ZWJhLnVtYnJlYWthYmxlQ3lwaGVyYW5kRGVjeXBoZXIoc2VsZWN0T3B0aW9uKSk7XG59IGVsc2UgaWYgKHNlbGVjdGlvbiA9PT0gMSkge1xuICBzZWxlY3RPcHRpb24gPSBmYWxzZTtcbiAgY29uc29sZS5sb2cocHJ1ZWJhLnVtYnJlYWthYmxlQ3lwaGVyYW5kRGVjeXBoZXIoc2VsZWN0T3B0aW9uKSk7XG59IGVsc2Uge1xuICBjb25zb2xlLmxvZygnT3BjacOzbiBubyBzb3BvcnRhZGEnKTtcbn0gKi9cblxuIl19