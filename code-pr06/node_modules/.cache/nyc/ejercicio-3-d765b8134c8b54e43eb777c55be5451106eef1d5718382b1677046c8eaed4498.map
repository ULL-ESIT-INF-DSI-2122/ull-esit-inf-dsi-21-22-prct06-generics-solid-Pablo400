{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-3.ts","sources":["/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-3.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable valid-jsdoc */\n/* eslint-disable max-len */\n/* eslint-disable require-jsdoc */\n\n/**\n * Class where you can decypher a string\n */\nexport class Cifrado {\n  /**\n   * Constructor of the class\n   * @param alphabet Alphabet the user passes\n   * @param message Message to cypher or Decypher\n   * @param key Key of the cypher and decypher\n   */\n  constructor(private alphabet : string, private message : string,\n    private key : string) {}\n\n  getAlphabet() {\n    return this.alphabet;\n  }\n\n  getMessage() {\n    return this.message;\n  }\n\n  getKey() {\n    return this.key;\n  }\n\n  /**\n   * This method resizes the key in case the message lenght is higher\n   * @param message Message to cypher or Decypher\n   * @param key Key of the cypher and decypher\n   * @return The new Key with the new lenght\n   */\n  resizekey(message : string, key : string) {\n    let i = 0;\n    while (key.length < message.length) {\n      key += key.charAt(i);\n      i++;\n    }\n    return key;\n  }\n\n  /**\n   * This method gets the position on the alphabet of any string\n   * @param alphabet The full alphabet introduced by the user\n   * @param string Any string\n   * @return The letter position of any letter on the string\n   */\n  getLetterPosition(alphabet : string, string : string) {\n    let letterPosition = 0;\n    for (let i = 0; i < alphabet.length; i++) {\n      if (string === alphabet[i]) {\n        letterPosition = i;\n        break;\n      }\n    }\n\n    return letterPosition;\n  }\n\n  /**\n   * This method cypher or decypher a string\n   * @param selectOption This lets the user to select if he wants to cypher or decypher a string\n   * @returns The cypher or decypher string\n   */\n  umbreakableCypherandDecypher(selectOption : boolean) {\n    let newKey : string = this.getKey();\n    let newMessage : string = this.getMessage();\n    let cypherFunction = 0;\n    const cypherLetterPosition = [];\n    let i = 0;\n    let j = 0;\n    let messageLetterPosition = 0;\n    let keyLetterPosition = 0;\n    let resultText = '';\n\n    newKey = newKey.toLowerCase();\n    newMessage = newMessage.toLowerCase();\n\n    if (newKey.length < newMessage.length) {\n      newKey = this.resizekey(newMessage, newKey);\n    }\n\n    while ( i < newMessage.length) {\n      messageLetterPosition = this.getLetterPosition(this.getAlphabet(), newMessage[i]);\n      keyLetterPosition = this.getLetterPosition(this.getAlphabet(), newKey[i]);\n      // Cifrar una cadena\n      if (selectOption === true) {\n        cypherFunction = (messageLetterPosition + keyLetterPosition) % (this.getAlphabet().length);\n      } else {\n        if ((messageLetterPosition - keyLetterPosition) % (this.getAlphabet().length) >= 0) {\n          cypherFunction = (messageLetterPosition - keyLetterPosition) % (this.getAlphabet().length);\n        } else {\n          cypherFunction = (messageLetterPosition - keyLetterPosition + this.getAlphabet().length) % (this.getAlphabet().length);\n        }\n      }\n      cypherLetterPosition.push(cypherFunction);\n      i++;\n    }\n\n    i = 0;\n    while (i < newKey.length) {\n      j = 0;\n      while (j < this.getAlphabet().length) {\n        if (j === cypherLetterPosition[i]) {\n          resultText += this.getAlphabet()[j];\n        }\n        j++;\n      }\n      i++;\n    }\n\n    return resultText;\n  }\n}\n\nconst scanf = require('scanf');\nlet alphabet = '';\nlet message = '';\nlet key = '';\nlet selection = 0;\nlet selectOption = true;\n\nconsole.log('Introduzca un alfabeto');\nalphabet = scanf('%s');\n\nconsole.log('Introduzca un mensaje para cifrar o descifrar');\nmessage = scanf('%s');\n\nconsole.log('Introduzca una clave');\nkey = scanf('%s');\n\nconst prueba = new Cifrado(alphabet, message, key);\n\nconsole.log('¿Quiere cifrar o descifrar? (0-Cifrar, 1-Descifrar)');\nselection = scanf('%d');\n\nif (selection === 0) {\n  selectOption = true;\n  console.log(prueba.umbreakableCypherandDecypher(selectOption));\n} else if (selection === 1) {\n  selectOption = false;\n  console.log(prueba.umbreakableCypherandDecypher(selectOption));\n} else {\n  console.log('Opción no soportada');\n}\n\n"]}