{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-1-PE101.ts","sources":["/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-1-PE101.ts"],"names":[],"mappings":";AAAA,gCAAgC;AAChC,mCAAmC;AACnC,kCAAkC;AAClC,6BAA6B;;;AAE7B;;GAEG;AACH,MAAa,YAAY;IAGvB,gBAAwB,CAAC;IAEzB;;;OAGG;IACI,MAAM,CAAC,gBAAgB;QAC5B,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE;YAChC,YAAY,CAAC,cAAc,GAAG,IAAI,YAAY,EAAE,CAAC;SAClD;QACD,OAAO,YAAY,CAAC,cAAc,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,mBAAmB,CAAC,CAAU,EAAE,CAAU;QACxC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACH,sBAAsB,CAAC,CAAU,EAAE,CAAU;QAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzD,CAAC;CACF;AA3CD,oCA2CC","sourcesContent":["/* eslint-disable valid-jsdoc */\n/* eslint-disable no-unused-vars */\n/* eslint-disable require-jsdoc */\n/* eslint-disable eol-last */\n\n/**\n * Class of RandomNumber\n */\nexport class RandomNumber {\n  private static randomInstance : RandomNumber;\n\n  private constructor() { }\n\n  /**\n   * A random instance of a Random Number\n   * @return A new instance or the same instance\n   */\n  public static getRandomInsance() : RandomNumber {\n    if (!RandomNumber.randomInstance) {\n      RandomNumber.randomInstance = new RandomNumber();\n    }\n    return RandomNumber.randomInstance;\n  }\n\n  /**\n   * Gets any aleatory number\n   * @return Aleatory number between 0 an 1\n   */\n  getAleatoryNumber() {\n    return Math.random();\n  }\n\n  /**\n   * This method gets an interval an retuns a float aleatory number\n   * @param n The less value\n   * @param m The max value\n   * @return A float aleatory number\n   */\n  floatAleatoryNumber(n : number, m : number) {\n    return (Math.random() * (m - n)) + n;\n  }\n\n  /**\n   * This method gets an interval an retuns a integrer aleatory number\n   * @param n The less value\n   * @param m The max value\n   * @return Inetegrer aleatory number\n   */\n  integrerAleatoryNumber(n : number, m : number) {\n    return Math.floor((Math.random() * ((m - n) + 1)) + n);\n  }\n}\n"]}