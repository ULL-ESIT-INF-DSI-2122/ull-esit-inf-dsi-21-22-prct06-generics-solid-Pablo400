{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-2.ts","sources":["/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/ejercicio-2.ts"],"names":[],"mappings":";;;AAMA,6EAAuE;AAEvE;;GAEG;AACH,MAAa,gBAAiB,SAAQ,sDAAiC;IACrE;;;OAGG;IACH,YAAY,mBAA8B;QACxC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAC7B,CAAC;IAAA,CAAC;IAEF;;;;OAIG;IACH,8BAA8B,CAAC,UAAkB;QAC/C,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,UAAU,CAAC,CAAC;IACjG,CAAC;IAED;;;;OAIG;IACH,8BAA8B,CAAC,UAAkB;QAC/C,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,UAAU,CAAC,CAAC;IACjG,CAAC;IAED;;;;OAIG;IACH,gCAAgC,CAAC,YAAqB;QACpD,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,YAAY,CAAC,CAAC;IACrG,CAAC;CACF;AAnCD,4CAmCC;AAGD;;GAEG;AACH,MAAa,eAAgB,SAAQ,sDAAgC;IACnE;;;OAGG;IACH,YAAY,mBAA6B;QACvC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAC7B,CAAC;IAAA,CAAC;IAEF;;;;OAIG;IACH,8BAA8B,CAAC,UAAkB;QAC/C,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,UAAU,CAAC,CAAC;IAChG,CAAC;IAED;;;;OAIG;IACH,8BAA8B,CAAC,UAAkB;QAC/C,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,UAAU,CAAC,CAAC;IAChG,CAAC;IAED;;;;OAIG;IACH,gCAAgC,CAAC,WAAoB;QACnD,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,KAAK,WAAW,CAAC,CAAC;IACnG,CAAC;CACF;AAnCD,0CAmCC;AAED;;GAEG;AACH,MAAa,qBAAsB,SAAQ,sDAAsC;IAC/E;;;OAGG;IACH,YAAY,mBAAmC;QAC7C,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAC7B,CAAC;IAAA,CAAC;IAEF;;;;OAIG;IACH,8BAA8B,CAAC,eAAuB;QACpD,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAC,CAAC;IACrH,CAAC;IAED;;;;OAIG;IACH,8BAA8B,CAAC,eAAuB;QACpD,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAC,CAAC;IACrH,CAAC;IAED;;;;OAIG;IACH,2CAA2C,CAAC,4BAAoC;QAC9E,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,oBAAoB,EAAE,KAAK,4BAA4B,CAAC,CAAC;IACpI,CAAC;CACF;AAnCD,sDAmCC;AAED;;;;;;;;;;;;;;;;;6EAiB6E","sourcesContent":["/* eslint-disable valid-jsdoc */\n/* eslint-disable max-len */\n/* eslint-disable require-jsdoc */\nimport {Series} from './Series';\nimport {Movie} from './Movies';\nimport {Documentary} from './Documentary';\nimport {BasicStreamableCollection} from './BasicStreameableCollection';\n\n/**\n * Series Collection Class\n */\nexport class SeriesCollection extends BasicStreamableCollection<Series> {\n  /**\n   * The constructor of Series Collection\n   * @param audiovisualProducts Array of Series\n   */\n  constructor(audiovisualProducts : Series[]) {\n    super(audiovisualProducts);\n  };\n\n  /**\n   * This method searchs for a Series by Year\n   * @param seriesYear Series Year of Launch\n   * @return All series found\n   */\n  searchAudiovisualProductByYear(seriesYear: number): Series[] | undefined {\n    return this.getAudiovisualProducts().filter((series) => series.getSeriesYear() === seriesYear);\n  }\n\n  /**\n   * This method searchs for a Series by Name\n   * @param seriesName Series Name\n   * @return The series found\n   */\n  searchAudiovisualProductByName(seriesName: string): Series[] | undefined {\n    return this.getAudiovisualProducts().filter((series) => series.getSeriesName() === seriesName);\n  }\n\n  /**\n   * This method searchs for a Series by Rating\n   * @param seriesRating series Rating\n   * @return The series found\n   */\n  searchAudiovisualProductByRating(seriesRating : string) : Series[] | undefined {\n    return this.getAudiovisualProducts().filter((series) => series.getSeriesRating() === seriesRating);\n  }\n}\n\n\n/**\n * Films Collection Class\n */\nexport class FilmsCollection extends BasicStreamableCollection<Movie> {\n  /**\n   * The constructor of Movies Collection\n   * @param audiovisualProducts Array of Movies\n   */\n  constructor(audiovisualProducts : Movie[]) {\n    super(audiovisualProducts);\n  };\n\n  /**\n   * This method searchs for a Movie by Year\n   * @param moviesYear Movie Year of Launch\n   * @return All movies found\n   */\n  searchAudiovisualProductByYear(moviesYear: number): Movie[] | undefined {\n    return this.getAudiovisualProducts().filter((movies) => movies.getMovieYear() === moviesYear);\n  }\n\n  /**\n   * This method searchs for a Movie by Name\n   * @param moviesName Movie Name\n   * @return All movies found\n   */\n  searchAudiovisualProductByName(moviesName: string): Movie[] | undefined {\n    return this.getAudiovisualProducts().filter((movies) => movies.getMovieName() === moviesName);\n  }\n\n  /**\n   * This method searchs for a Movie by Rating\n   * @param movieRating Movie Rating\n   * @return All movies found\n   */\n  searchAudiovisualProductByRating(movieRating : string) : Movie[] | undefined {\n    return this.getAudiovisualProducts().filter((movies) => movies.getMovieRating() === movieRating);\n  }\n}\n\n/**\n * Documentaries Collection Class\n */\nexport class DocumentaryCollection extends BasicStreamableCollection<Documentary> {\n  /**\n   * The constructor of Documentary Collection\n   * @param audiovisualProducts Array of Documentaries\n   */\n  constructor(audiovisualProducts : Documentary[]) {\n    super(audiovisualProducts);\n  };\n\n  /**\n   * This method searchs for a Documentary by Year\n   * @param documentaryYear Documentary Year of Launch\n   * @return All documentaries found\n   */\n  searchAudiovisualProductByYear(documentaryYear: number): Documentary[] | undefined {\n    return this.getAudiovisualProducts().filter((documentary) => documentary.getDocumentaryYear() === documentaryYear);\n  }\n\n  /**\n   * This method searchs for a Documentary by Name\n   * @param documentaryName Documentary Name\n   * @return All documentaries found\n   */\n  searchAudiovisualProductByName(documentaryName: string): Documentary[] | undefined {\n    return this.getAudiovisualProducts().filter((documentary) => documentary.getDocumentaryName() === documentaryName);\n  }\n\n  /**\n   * This method searchs for a Documentary by Name\n   * @param documentaryBroadcastingMedia Documentary Broadcasting Media\n   * @return All documentaries found\n   */\n  searchAudiovisualProductByBroadcastingMedia(documentaryBroadcastingMedia: string): Documentary[] | undefined {\n    return this.getAudiovisualProducts().filter((documentary) => documentary.getBroadcastingMedia() === documentaryBroadcastingMedia);\n  }\n}\n\n/* const mySeriesCollection = new SeriesCollection([\n  new Series('The Umbrella Academy', 'Drama', 2019, 2, 20, 'TV-16'),\n  new Series('Stranger Things', 'Misterio', 2016, 4, 34, 'TV-14'),\n]);\n\nconst myMoviesCollection = new FilmsCollection([\n  new Movie('The Batman', 'Suspense', 2022, 176, 'PG-13'),\n  new Movie('The Avengers', 'Acci√≥n', 2012, 143, 'PG-13'),\n]);\n\nconst myDocumentaryCollection = new DocumentaryCollection([\n  new Documentary('El Hombre y la Tierra', 1974, 3, 124, 'RTVE'),\n  new Documentary('Planeta Tierra', 2006, 1, 11, 'BBC'),\n]);\n\nconsole.log(mySeriesCollection.searchAudiovisualProductByYear(2019));\nconsole.log(myMoviesCollection.searchAudiovisualProductByYear(2022));\nconsole.log(myDocumentaryCollection.searchAudiovisualProductByYear(2006)); */\n\n"]}