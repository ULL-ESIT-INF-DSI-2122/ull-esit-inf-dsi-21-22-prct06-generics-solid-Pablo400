{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/BasicStreameableCollection.ts","sources":["/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-Pablo400/code-pr06/src/BasicStreameableCollection.ts"],"names":[],"mappings":";AAAA,gCAAgC;AAChC,4BAA4B;AAC5B,kCAAkC;;;AAoBlC;;GAEG;AACH,MAAsB,yBAAyB;IAC7C,YAAoB,mBAAyB;QAAzB,wBAAmB,GAAnB,mBAAmB,CAAM;IAAI,CAAC;IAElD;;;OAGG;IACH,8BAA8B;QAC5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,qBAAqB,CAAC,kBAAsB;QAC1C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,sBAAsB;QACpB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,wBAAwB,CAAC,KAAc;QACrC,IAAI,KAAK,GAAG,IAAI,CAAC,8BAA8B,EAAE,EAAE;YACjD,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC3C;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;CAIF;AA7CD,8DA6CC","sourcesContent":["/* eslint-disable valid-jsdoc */\n/* eslint-disable max-len */\n/* eslint-disable require-jsdoc */\n\n/**\n * Interface of Basic Streameable Collection\n */\ninterface Streameable<T> {\n  addAudiovisualProduct(audiovisualProduct : T) : void;\n  getAudiovisualProducts() : T[];\n  removeAudiovisualProduct(index : number) : T[] | undefined;\n  getNumberOfAudiovisualProducts() : number;\n}\n\n/**\n * Interface that contains the search methods of audiovisual products\n */\ninterface StreameableSearch<T> {\n  searchAudiovisualProductByYear(searchTerm : number) : T[] | undefined;\n  searchAudiovisualProductByName(searchTerm : string) : T[] | undefined;\n}\n\n/**\n * Base class of the different collections\n */\nexport abstract class BasicStreamableCollection<T> implements Streameable<T>, StreameableSearch<T> {\n  constructor(private audiovisualProducts : T[]) { }\n\n  /**\n   * Method to get the number of audiovisual products\n   * @return The number of audiovisual products\n   */\n  getNumberOfAudiovisualProducts() {\n    return this.audiovisualProducts.length;\n  }\n\n  /**\n   * This method adds an audiovisual product of any collection\n   * @param audiovisualProduct Any audiovisual product\n   * @return The audiovisual product array with the added audiovisual product\n   */\n  addAudiovisualProduct(audiovisualProduct : T) {\n    this.audiovisualProducts.push(audiovisualProduct);\n    return this.audiovisualProducts;\n  }\n\n  /**\n   * Get any audiovisual product\n   * @return The actual audiovisual product array\n   */\n  getAudiovisualProducts() {\n    return this.audiovisualProducts;\n  }\n\n  /**\n   * This method removes an audiovisual product of any collection\n   * @param index The index of the element to be deleted\n   * @return The audiovisual product array without the deleted audiovisual product\n   */\n  removeAudiovisualProduct(index : number) {\n    if (index < this.getNumberOfAudiovisualProducts()) {\n      this.audiovisualProducts.splice(index, 1);\n    } else {\n      return undefined;\n    }\n    return this.audiovisualProducts;\n  }\n\n  abstract searchAudiovisualProductByYear(searchTerm: number): T[] | undefined;\n  abstract searchAudiovisualProductByName(searchTerm: string): T[] | undefined;\n}\n"]}